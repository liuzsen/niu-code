name: Build and Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  # Build frontend once and share across all platforms
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.1

      - name: Install frontend dependencies
        working-directory: frontend
        run: pnpm install

      - name: Build frontend
        working-directory: frontend
        run: pnpm run build

      - name: Verify frontend build
        run: |
          if [ ! -d "frontend/dist" ]; then
            echo "Error: frontend/dist directory not found!"
            exit 1
          fi
          echo "Frontend build verified, dist directory exists"
          ls -la frontend/dist

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist
          retention-days: 1

  build-binaries:
    name: Build ${{ matrix.platform }}
    needs: build-frontend
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - platform: Linux x64
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            binary_name: niu-code-linux-x64
            use_musl: true
            use_upx: true
          - platform: macOS x64
            os: macos-13
            target: x86_64-apple-darwin
            binary_name: niu-code-macos-x64
            use_musl: false
            use_upx: false
          - platform: macOS ARM64
            os: macos-14
            target: aarch64-apple-darwin
            binary_name: niu-code-macos-arm64
            use_musl: false
            use_upx: false
    steps:
      - uses: actions/checkout@v4

      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

      - name: Verify frontend files exist
        run: |
          if [ ! -d "frontend/dist" ]; then
            echo "Error: frontend/dist directory not found!"
            exit 1
          fi
          if [ ! -f "frontend/dist/index.html" ]; then
            echo "Error: frontend/dist/index.html not found!"
            exit 1
          fi
          echo "Frontend files verified:"
          ls -la frontend/dist/ | head -20

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl-tools (Linux only)
        if: matrix.use_musl
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Install UPX (Linux only)
        if: matrix.use_upx
        run: sudo apt-get install -y upx

      - name: Build backend
        working-directory: backend
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Linux only)
        if: matrix.use_musl
        run: strip backend/target/${{ matrix.target }}/release/niu-code

      - name: Strip binary (macOS only)
        if: runner.os == 'macOS'
        run: strip backend/target/${{ matrix.target }}/release/niu-code

      - name: Compress binary with UPX (Linux only)
        if: matrix.use_upx
        run: |
          upx --best --lzma backend/target/${{ matrix.target }}/release/niu-code
          ls -lh backend/target/${{ matrix.target }}/release/niu-code

      - name: Prepare binary
        run: |
          mkdir -p release
          cp backend/target/${{ matrix.target }}/release/niu-code release/${{ matrix.binary_name }}
          chmod +x release/${{ matrix.binary_name }}
          ls -lh release/${{ matrix.binary_name }}

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.binary_name }}
          path: release/${{ matrix.binary_name }}
          retention-days: 1

  create-release:
    name: Create GitHub Release
    needs: build-binaries
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download all binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release directory
        run: |
          mkdir -p release
          cp artifacts/niu-code-linux-x64/niu-code-linux-x64 release/
          cp artifacts/niu-code-macos-x64/niu-code-macos-x64 release/
          cp artifacts/niu-code-macos-arm64/niu-code-macos-arm64 release/
          cp scripts/install.sh release/
          chmod +x release/*
          ls -lh release/

      - name: Generate checksums
        working-directory: release
        run: |
          sha256sum * > checksums.txt
          cat checksums.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: release/*
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## Installation

            ### Quick Install (Linux & macOS)
            ```bash
            curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/main/scripts/install.sh | bash
            ```

            ### Supported Platforms
            - Linux x64
            - macOS x64 (Intel)
            - macOS ARM64 (Apple Silicon)

            ### Prerequisites
            - Node.js (v18 or higher)
            - Claude Code CLI: `npm install -g @anthropic-ai/claude-code`

            ### Usage
            Access the web UI at: http://127.0.0.1:33333

            ## Uninstallation

            ### Quick Uninstall (Linux & macOS)
            ```bash
            curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/main/scripts/uninstall.sh | bash
            ```
